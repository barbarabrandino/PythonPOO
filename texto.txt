import math

# 1Ô∏è‚É£ Carro e Moto com m√©todo acelerar()
class Carro:
    def acelerar(self):
        return "Carro acelerando com motor potente!"

class Moto:
    def acelerar(self):
        return "Moto acelerando com ronco esportivo!"

# 2Ô∏è‚É£ FuncionarioCLT e FuncionarioPJ com c√°lculo de sal√°rio diferente
class Funcionario:
    def __init__(self, nome, salario_base):
        self.nome = nome
        self.salario_base = salario_base

    def calcular_salario(self):
        return 0

class FuncionarioCLT(Funcionario):
    def calcular_salario(self):
        return self.salario_base - (self.salario_base * 0.1)  # desconto de 10%

class FuncionarioPJ(Funcionario):
    def calcular_salario(self):
        return self.salario_base  # sem desconto

# 3Ô∏è‚É£ Sistema de envio de mensagens
class Email:
    def enviar_mensagem(self):
        return "Enviando mensagem por Email."

class SMS:
    def enviar_mensagem(self):
        return "Enviando mensagem por SMS."

class Whatsapp:
    def enviar_mensagem(self):
        return "Enviando mensagem por WhatsApp."

# 4Ô∏è‚É£ Sistema de animais com movimentar()
class Passaro:
    def movimentar(self):
        return "Voando pelos c√©us."

class Peixe:
    def movimentar(self):
        return "Nadando no oceano."

# 5Ô∏è‚É£ FormaGeometrica, Quadrado e Circulo
class FormaGeometrica:
    def calcular_area(self):
        pass

class Quadrado(FormaGeometrica):
    def __init__(self, lado):
        self.lado = lado

    def calcular_area(self):
        return self.lado ** 2

class Circulo(FormaGeometrica):
    def __init__(self, raio):
        self.raio = raio

    def calcular_area(self):
        return math.pi * self.raio ** 2

# 6Ô∏è‚É£ Transporte com custo_viagem(distancia)
class Onibus:
    def custo_viagem(self, distancia):
        return distancia * 0.5  # R$0,50/km

class Bicicleta:
    def custo_viagem(self, distancia):
        return 0  # gratuita

class CarroTransporte:
    def custo_viagem(self, distancia):
        return distancia * 0.8  # R$0,80/km

# 7Ô∏è‚É£ Arquivo com m√©todo abrir()
class Arquivo:
    def abrir(self):
        pass

class ArquivoTexto(Arquivo):
    def abrir(self):
        return "Abrindo arquivo de texto."

class ArquivoImagem(Arquivo):
    def abrir(self):
        return "Abrindo imagem."

class ArquivoVideo(Arquivo):
    def abrir(self):
        return "Abrindo v√≠deo."

# 8Ô∏è‚É£ Streaming com reproduzir()
class Filme:
    def reproduzir(self):
        return "Reproduzindo filme."

class Musica:
    def reproduzir(self):
        return "Tocando m√∫sica."

# 9Ô∏è‚É£ Sistema de notifica√ß√µes
class NotificacaoEmail:
    def enviar(self):
        return "Notifica√ß√£o enviada por Email."

class NotificacaoSMS:
    def enviar(self):
        return "Notifica√ß√£o enviada por SMS."

class NotificacaoPush:
    def enviar(self):
        return "Notifica√ß√£o enviada por Push."

# üîü Pagamento com processamento em lista
class Pagamento:
    def processar(self):
        pass

class PagamentoCartao(Pagamento):
    def processar(self):
        return "Processando pagamento com cart√£o."

class PagamentoPix(Pagamento):
    def processar(self):
        return "Processando pagamento via Pix."

class PagamentoBoleto(Pagamento):
    def processar(self):
        return "Processando pagamento com boleto."

# Simula√ß√£o do processamento
pagamentos = [PagamentoCartao(), PagamentoPix(), PagamentoBoleto()]
for p in pagamentos:
    print(p.processar())

